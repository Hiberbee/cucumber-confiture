plugins {
  id("java-library")
  id("com.github.ben-manes.versions") version "0.28.0"
  id("idea")
  id("maven-publish")
  id("jacoco")
  id("org.sonarqube") version "2.8"
  id("org.jetbrains.gradle.plugin.idea-ext") version "0.7"
}

group = "com.hiberbee.cucumber"
version = "1.0.0-SNAPSHOT"

repositories {
  mavenCentral()
}

def VERSIONS = [
  cucumber            : "5.6.0",
  cucumberReporting   : "4.0.36",
  gradle              : "6.3",
  jetbrainsAnnotations: "19.0",
  junit               : "5.6.2",
  lombok              : "1.18.12",
  springBoot          : "2.2.6.RELEASE",
]

sonarqube {
  properties {
    property "sonar.projectKey", "cucumber-confiture"
    property "sonar.organization", "hiberbee"
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.login", "f8a7b63196fc3371b752dd8ef3111208e2cb3c8e"
  }
}

idea {
  project {
    settings {
      copyright {
        useDefault = "Hiberbee"
        profiles {
          Hiberbee {
            notice = file("LICENSE").readLines().join("\n")
          }
        }
      }
    }
    module {
      setExcludeDirs(files("gradle", "build").toSet())
    }
  }
}

class CucumberFeature extends JavaExec {

  CucumberFeature() {
    super.setGroup("features")
    super.dependsOn(project.tasks.getByName("testClasses"))
    super.outputs.dir("build/reports")
    super.setMain("org.junit.platform.console.ConsoleLauncher")
    super.
      setClasspath(project.
        convention.
        getPlugin(JavaPluginConvention.class).
        getSourceSets().
        findByName("test").
        runtimeClasspath)
    super.args("--include-engine", "cucumber", "--reports-dir", "build/reports")
    super.finalizedBy(project.tasks.getByName("jacocoTestReport"))
  }
}

tasks.register("functionalTest", CucumberFeature) {
  args += ["--include-tag", "ui", "--select-package", "features.functional"]
}
tasks.register("integrationalTest", CucumberFeature) {
  args += ["--select-package", "features.integrational"]
}
tasks.register("infrastructureTest", CucumberFeature) {
  args += ["--select-package", "features.infrastructure"]
}
tasks.register("systemTest", CucumberFeature) {
  args += ["--select-package", "features.system"]
}


allprojects {
  group = rootProject.group
  version = rootProject.version

  apply plugin: "org.jetbrains.gradle.plugin.idea-ext"
  apply plugin: "idea"
  apply plugin: "jacoco"
  apply plugin: "java-library"

  tasks.withType(GenerateIdeaModule).configureEach {
    module.setExcludeDirs(files("gradle", "build").toSet())
    module.setInheritOutputDirs(true)
    module.setDownloadJavadoc(false)
    module.setDownloadSources(true)
  }

  tasks.withType(JavaCompile).configureEach {
    setSourceCompatibility(JavaVersion.VERSION_11)
    setTargetCompatibility(JavaVersion.VERSION_11)
    it.options.setFork(true)
    it.options.setIncremental(true)
    dependsOn(tasks.named("processResources"))
  }

  tasks.withType(Wrapper).configureEach {
    distributionType(Wrapper.DistributionType.ALL)
    gradleVersion(VERSIONS.gradle.toString())
  }

  tasks.withType(Test).configureEach {
    useJUnitPlatform {
      failFast = true
    }
    scanForTestClasses(false)
    jacoco {
      enabled = true
      dumpOnExit = true
    }
    finalizedBy(tasks.named("jacocoTestReport"))
  }

  tasks.withType(JacocoCoverageVerification).configureEach {
    setEnabled(true)
  }

  tasks.withType(JacocoReport).configureEach {
    setEnabled(true)
    reports {
      xml.enabled = true
    }
  }

  repositories {
    jcenter()
  }

  configurations {
    compileOnly {
      extendsFrom(annotationProcessor)
    }
  }

  dependencies {
    implementation platform("org.junit:junit-bom:$VERSIONS.junit")
    implementation platform("io.cucumber:cucumber-core:$VERSIONS.cucumber")
    implementation platform("org.springframework.boot:spring-boot-dependencies:$VERSIONS.springBoot")

    testImplementation "de.monochromata.cucumber:reporting-plugin:$VERSIONS.cucumberReporting"
    testImplementation("io.cucumber:cucumber-junit-platform-engine")
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("org.junit.jupiter:junit-jupiter-engine")
    testRuntimeOnly("org.junit.platform:junit-platform-console")
    testRuntimeOnly("org.junit.platform:junit-platform-runner")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
  }
}

dependencies {
  implementation(project(":functional"))
  implementation(project(":integrational"))
  implementation(project(":infrastructure"))
  implementation(project(":system"))
}
