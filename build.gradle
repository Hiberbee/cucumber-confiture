plugins {
  id("com.github.ben-manes.versions") version "0.29.0"
  id("com.google.cloud.tools.jib") version '2.4.0'
  id("idea")
  id("jacoco")
  id("java-library")
  id("maven-publish")
  id("org.jetbrains.gradle.plugin.idea-ext") version "0.8.1"
  id("org.sonarqube") version "3.0"
}

group "com.hiberbee.cucumber"
description "Monorepo entrypoint for Cucumber test packages"
version "1.0.0-SNAPSHOT"

def VERSIONS = [
  cucumber            : "6.3.0",
  gradle              : "6.6-rc-4",
  guava               : "29.0-jre",
  jetbrainsAnnotations: "19.0.0",
  junit               : "5.7.0-M1",
  netty               : "4.1.49.Final",
  lombok              : "1.18.12",
  springBoot          : "2.3.2.RELEASE",
]

wrapper {
  distributionType = Wrapper.DistributionType.ALL
  gradleVersion = VERSIONS.gradle
}

idea {
  project {
    settings {
      copyright {
        useDefault = "MIT"
        profiles {
          MIT {
            notice = file("LICENSE").readLines().join("\n")
          }
        }
      }
    }
  }
  module {
    downloadJavadoc = false
    downloadSources = true
    excludeDirs += files("gradle", ".gradle")
    inheritOutputDirs = true
    outputDir = file("build")
  }
}

repositories {
  mavenCentral()
}

sonarqube {
  properties {
    property "sonar.login", System.getenv("SONAR_TOKEN")
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.projectKey", rootProject.name
    property "sonar.organization", System.getProperty("organization")
    property "sonar.links.homepage", System.getProperty("vcs.url")
  }
}

class CucumberFeature extends JavaExec {

  CucumberFeature() {
    group "cucumber"
    outputs.dir "${project.buildDir}/reports"
    main "org.junit.platform.console.ConsoleLauncher"
    classpath project.convention.getPlugin(JavaPluginConvention.class).sourceSets.findByName("test").runtimeClasspath
    args "--include-engine", "cucumber", "--reports-dir", "${project.buildDir}/reports"
    dependsOn project.tasks.getByName("testClasses"), project.tasks.getByName("processResources")
    finalizedBy project.tasks.getByName("jacocoTestReport")
  }

  @Input
  void withTags(String... tags) {
    tags.findAll{!it.empty }.each {
      args += ["--include-tag", it]
    }
  }

  @Input
  void withoutTags(String... tags) {
    tags.findAll{!it.empty }.each {
      args += ["--exclude-tag", it]
    }
  }

  @Input
  void withPackage(String packageName = "features") {
    args += ["--select-package", packageName]
  }

  @Input
  void withProperties(Map<String, Object> properties) {
    properties.each {
      jvmArgs += "-D${it.key}=${it.value}"
    }
  }

}

allprojects {
  group = rootProject.group
  version = rootProject.version

  apply plugin: "idea"
  apply plugin: "jacoco"
  apply plugin: "java-library"
  apply plugin: "org.sonarqube"
  apply plugin: "org.jetbrains.gradle.plugin.idea-ext"

  jacoco {
    toolVersion "0.8.5"
  }
  sonarqube {
    properties {
      property("sonar.host.url", "https://sonarcloud.io")
      property("sonar.login", System.getenv("SONAR_TOKEN"))
      property("sonar.organization", "hiberbee")
      property("sonar.project", project.name)
      property("sonar.projectKey", project.name.toLowerCase())
    }
  }

  tasks.withType(CucumberFeature).configureEach {
    it.withPackage("features")
  }

  tasks.withType(GenerateIdeaModule).configureEach {
    module.downloadJavadoc false
    module.downloadSources true
    module.excludeDirs.addAll(files("gradle", ".gradle", ".scannerwork"))
    module.inheritOutputDirs true
    module.outputDir file(project.buildDir)
  }

  tasks.withType(JavaCompile).configureEach {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    options.setFork(true)
    options.setIncremental(true)
    dependsOn(tasks.named("processResources"))
  }

  tasks.withType(Test).configureEach {
    useJUnitPlatform {
      failFast = true
    }
    scanForTestClasses(false)
    jacoco {
      enabled true
      dumpOnExit true
    }
    finalizedBy(tasks.named("jacocoTestReport"))
  }

  tasks.withType(JacocoCoverageVerification).configureEach {
    enabled true
  }

  tasks.withType(JacocoReport).configureEach {
    enabled = true
    reports {
      xml.enabled = true
      html.enabled true
      csv.enabled false
    }
  }

  configurations {
    compileOnly {
      extendsFrom(annotationProcessor)
    }
  }

  dependencies {
    implementation("com.google.guava:guava") {
      version {
        strictly VERSIONS.guava
      }
    }
    implementation platform("org.junit:junit-bom:$VERSIONS.junit")
    implementation platform("io.cucumber:cucumber-core:$VERSIONS.cucumber")
    implementation platform("org.springframework.boot:spring-boot-dependencies:$VERSIONS.springBoot")

    testImplementation("io.cucumber:cucumber-junit-platform-engine")
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("org.junit.jupiter:junit-jupiter-engine")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testRuntimeOnly("org.junit.platform:junit-platform-console")
    testRuntimeOnly("org.junit.platform:junit-platform-runner")
  }
}

subprojects {

  apply plugin: "maven-publish"
  apply plugin: "com.github.ben-manes.versions"

  tasks.register("features", CucumberFeature)

  publishing {
    repositories {
      maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/hiberbee/cucumber-confiture")
        credentials {
          username = System.getenv("GITHUB_USERNAME")
          password = System.getenv("GITHUB_TOKEN")
        }
      }
    }
    publications {
      gpr(MavenPublication) {
        from(components.java)
      }
    }
  }
}
